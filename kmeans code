import numpy as np

def init_centers(X, k):
    #Randomly samples k observations from X as centers.
    samples = np.random.choice(len(X), size=k, replace=False)
    return X[samples, :]

def assign_cluster_labels (X, centers):
    c2 = np.sum(np.power(centers, 2), axis=1, keepdims=True)
    tmpdiff = 2 * np.dot(X, centers.T) - c2.T
    labels = np.argmax(tmpdiff, axis=1)
    return labels

def update_centers(X, y):

    m, d = X.shape
    k = max(y) + 1
    assert m == len(y)
    assert (min(y) >= 0)
    
    centers = np.empty((k, d))
    for j in range(k):
        # Compute the new center of cluster j,
        centers[j,:]=np.mean(X[y==j, :], axis=0)
    return centers

def has_converged(old_centers, centers):
    return set([tuple(x) for x in old_centers]) == set([tuple(x) for x in centers])

def kmeans(X, k,
           starting_centers=None,
           max_steps=np.inf):
    if starting_centers is None:
        centers = init_centers(X, k)
    else:
        centers = starting_centers
        
    converged = False
    labels = np.zeros(len(X))
    i = 1
    while (not converged) and (i <= max_steps):
        old_centers = centers
        labels = assign_cluster_labels (X, old_centers)
        centers = update_centers(X, labels)
        converged = has_converged(old_centers, centers)
        i += 1
    return labels

def final_center(data, labels):
    centers = {}
    for j in range(k):
        centers[j] = np.mean(data[labels==j, :], axis=0)
    return centers

#read the data and label
data = np.loadtxt("data.dat") 
data = np.array(data).T

k=2
labels = kmeans(data, k, starting_centers=None, max_steps=10)
centers = final_center(data, labels)
